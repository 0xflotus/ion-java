This is a collection of scripts written by majm@ to automate the process of
sending emails out to relevant parties who are still using deprecated APIs of
the Ion Team's libraries. This implementation is UNSUPPORTED, use it at your own
risk!

BuilderTools doesn't provide an all-in-one interface to detect consumers who
are still using deprecated APIs. As such, these scripts consists of a mashup
of API endpoints to different services to retrieve the information needed.

Before using these scripts, you should have a dry-run build request submitted
and completed. The dry-run build request should have all the deprecated APIs
in question removed, so that consumers that are still using these APIs will
be broken by this dry-run build, with compiler errors in the build log. If
the dry-run build has completed with a 'Success' status, that means that no
consumer is using the deprecated APIs, you're done! You don't need to run these
scripts.

You should download the plain text audit log of the dry-run build, this will
be the entry point for the deprecation script.



Summaries of each component:
* deprecation_script.rb - The script that parses the audit log, generates
                          objects based off each failed package build task,
                          and then formats each failed package build into a
                          mail command stored in a directory of your choosing.

# deprecation_mailer.rb - The script that handles the execution of mail
                          commands. This script sends REAL emails out. You can
                          set the mailer as a trial run (printing the mail
                          command instead of executing it) through setting the
                          SEND_REAL_EMAILS constant in 'constants.rb'.

# constants.rb          - This contains configuration points for the
                          scripts. Notably, it will hold the references to
                          the audit log that you want to parse, output files
                          for debugging and logging, the hash (map) of apis
                          to their respective regexps, and the email templates.

# failed_build_task.rb  - The class that encapsulates a failed package build
                          task. The uniqueness (primary index) of
                          FailedBuildTask objects are their package name and
                          version.

# deprecation_email.rb  - The class that encapsulates an email to be sent.



Sample Workflow:
0. Pre-condition: You have a dry-run build request that is completed. You have
   SDETools which gives you ruby 1.8.7.
1. Create a directory named 'run_<build_request_id>'. Download the plain
   text of the audit log and save it as constants.rb's AUDIT_LOG_FILE.
2. Set constants.rb's BUILD_REQUEST_ID to that of the dry-run build.
3. Set constants.rb's SEND_REAL_EMAILS to false. Real emails will not be sent.
4. Set any other constants within 'constants.rb' for your needs.
5. Run the script to generate emails:
     $ ruby deprecation_script.rb
6. Monitor the log:
     $ tail -f run_<build_request_id>/script_log.txt
7. When the script is completed, you will have generated ready-to-execute 'mail'
   commands in the constants.rb's GEN_EMAIL_OUTPUT_DIR directory.
8. Double-check that each of these emails are correct.
9. Print the emails, real emails will not be sent as SEND_REAL_EMAILS is false:
     $ ruby deprecation_mailer.rb
