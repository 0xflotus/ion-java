<?xml version="1.0"?>

<project name="IonJava" basedir="." default="test" xmlns:ht="happytrails">

	<import file="${happytrails.root}/happytrails.xml"/>

<!--
  <import file="happytrails.xml"/>
  <import file="javadoc.xml"/>
-->
<!--
  <target name="build.properties" depends="init:directories,commonTrails">
-->
  <ht:import file="javadoc.xml"/>

  <target name="build.properties">
    <property name="dir.output"  location="${bp:package-build-root}/private"/>
    <property name="dir.src"     location="${basedir}/src"/>
    <property name="dir.doc"     location="${bp:package-build-root}/docs"/>
    <property name="dir.classes" location="${dir.output}/classes"/>
    <property name="dir.release" location="${bp:package-build-root}/lib"/>

    <property name="dir.test"         location="${basedir}/test"/>
<!--<property name="dir.test.src"     location="${dir.test}/src"/> -->
    <property name="dir.test.src"     location="${dir.test}"/>
<!--<property name="dir.test.config"  location="${dir.test}/config"/> -->
    <property name="dir.test.classes" location="${dir.output}/test"/>

    <!--
      propertycopy is a workaround for BrazilPath's astonishingly bad choice of syntax for referring
      to other-than-build-tool-dependent packages (using curlies which are special to Ant, the main
      consumer of said syntax)

      The Brazil Path recipe itself is the HT3 way of referring to an arbitrary built folder (anything not
      executable is considered "config") from IonTests.  A link farm is created under build/private/tmp
      pointing to those files in the package cache or local workspace
    -->
    <propertycopy property="dir.test.pkg"
        from="bp:{IonTests}testrun.configfarm.iontestdata"/>
  	<!-- this property points to that linkfarm -->
    <property name="dir.test.data" location="${dir.test.pkg}/iontestdata"/>

    <property name="jar.output.src"  location="${dir.release}/${ant.project.name}.jar"/>
    <property name="jar.output.test" location="${dir.release}/${ant.project.name}-test.jar"/>

    <property name="dir.output.logs" location="${dir.output}/log"/>
    <path id="extraJars">
<!--
      <fileset dir="lib">
        <include name="**/*.jar"/>
      </fileset>
-->
    </path>
  </target>

  <target name="build.dirs" depends="build.properties">
    <mkdir dir="${dir.doc}" />
    <mkdir dir="${dir.classes}" />
    <mkdir dir="${dir.release}" />
    <mkdir dir="${dir.output}" />
    <mkdir dir="${dir.test.classes}" />
    <mkdir dir="${dir.output.logs}" />
  </target>


  <!-- ==================================================================== -->


  <target name="build" depends="build.dirs">
    <javac srcdir="${dir.src}" debug="on" 
           destdir="${dir.classes}"
           source="1.5" target="1.5">
      <classpath>
        <path path="${bp:build.classpath}"/>
        <path path="${bp:tool.classpath}"/>
        <path refid="extraJars" />
      </classpath>
    </javac>
  </target>


  <target name="jars" depends="build">
    <jar destfile="${jar.output.src}"
         basedir="${dir.classes}" 
    >
      <manifest>
        <attribute name="Main-Class" value="com.amazon.ion.impl.IonBuild"/>
      </manifest>
    </jar>
<!--
    <copy todir="${dir.release}">
      <fileset dir="lib">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
-->
  </target>

  <target name="build.test" depends="jars">
    <javac srcdir="${dir.test.src}"
           destdir="${dir.test.classes}"
           debug="true"
           source="1.5" target="1.5">
      <classpath>
        <path path="${bp:tool.classpath}"/>
        <path path="${bp:testbuild.classpath}"/>
        <pathelement location="${dir.classes}"/>
      </classpath>
    </javac>
  </target>

  <target name="jars.test" depends="build.test">
    <jar destfile="${jar.output.test}" basedir="${dir.test.classes}"/>
  </target>

  <target name="test" depends="jars.test" 
      description="Run unit tests">
    <property name="teardown" value="true"/>
    <property name="testcaseOverride" value="()"/>
    <property name="domain" value="test"/>
    <property name="loglevel" value="DEBUG"/>
    <property name="suite" value="AllTests"/>

    <junit printsummary="false"
           haltonfailure="false" haltonerror="false"
           failureproperty="test.failure"
           dir="${basedir}"
           fork="true"
           includeantruntime="false">
      <test name="${suite}" todir="${dir.output.logs}" outfile="TEST" />

      <!-- JUnit task adds the minimum Ant libs to make things work. -->
      <classpath>
        <path path="${bp:tool.classpath}"/>
        <path path="${bp:testbuild.classpath}"/>
        <pathelement location="${jar.output.src}"/>
        <pathelement location="${jar.output.test}"/>
      </classpath>

      <sysproperty key="java.library.path" value="${java.libraryPath.test}" />
      <sysproperty key="com.amazon.iontests.iontestdata.path"
                   value="${dir.test.data}"/>

      <assertions enableSystemAssertions="true">
        <!--
          This syntax gives no easy way to turn assertions on/off by property
          -->
        <enable />
      </assertions>

      <!-- Log messages to the console. -->
      <formatter type="brief" usefile="false" />

      <!-- Long logs to file. -->
      <formatter type="xml" />
    </junit>

    <fail message="Test(s) failed" if="test.failure" />
  </target>


  <!-- ==================================================================== -->


  <target name="javadoc" depends="build.properties">
    <ht:javadoc
        overview= "${dir.src}/com/amazon/ion/overview.html"
        windowtitle="IonJava API"
        doctitle="The IonJava API Reference"
        header="IonJava API Reference"
        bottom="&lt;center>Copyright (C) 2007-2009 Amazon.com. All Rights Reserved.&lt;/center>"
        docencoding="UTF-8"
        destdir="${dir.doc}"
    >
      <fileset dir="${dir.src}">
        <include name="**/*.java"/>
        <exclude name="com/amazon/ion/apps/**" />
        <exclude name="com/amazon/ion/impl/**" />
      </fileset>
      <classpath>
        <pathelement path="${bp:tool.classpath}"/>
        <pathelement path="${bp:testbuild.classpath}"/>
      </classpath>
    </ht:javadoc>
  </target>


  <target name="doc" depends="javadoc">
    <!-- Also build manuals etc. -->
  </target>


  <!-- ==================================================================== -->


  <target name="release" depends="test, doc"
          description="Build and test all release artifacts.">
  </target>


  <target name="all" depends="release"
          description="Build everything.">
  </target>

  <target name="cruise" depends="test"
          description="Run CruiseControl continuous build">
  </target>

</project>
